// @mixins
//
// We use this to control border radius.
// $radius - Default: $global-radius || 4px
@mixin radius($radius:$global-radius) {
  @if $radius {
    border-radius: $radius;
  }
}

// @mixins
//
// We use this to create equal side border radius on elements.
// $side - Options: left, right, top, bottom
@mixin side-radius($side, $radius:$global-radius) {
  @if ($side == left or $side == right) {
    -webkit-border-bottom-#{$side}-radius: $radius;
    -webkit-border-top-#{$side}-radius: $radius;
    border-bottom-#{$side}-radius: $radius;
    border-top-#{$side}-radius: $radius;
  } @else {
    -webkit-#{$side}-left-radius: $radius;
    -webkit-#{$side}-right-radius: $radius;
    border-#{$side}-left-radius: $radius;
    border-#{$side}-right-radius: $radius;
  }
}

// @mixins
//
// We can control whether or not we have inset shadows edges.
// $active - Default: true, Options: false
@mixin inset-shadow($active:true) {
  box-shadow: $shiny-edge-size $shiny-edge-color inset;

  @if $active { &:active {
    box-shadow: $shiny-edge-size $shiny-edge-active-color inset; } }
}

// @mixins
//
// We use this to add transitions to elements
// $property - Default: all, Options: http://www.w3.org/TR/css3-transitions/#animatable-properties
// $speed - Default: 300ms
// $ease - Default: ease-out, Options: http://css-tricks.com/almanac/properties/t/transition-timing-function/
@mixin single-transition($property:all, $speed:300ms, $ease:ease-out) {
  @include transition($property, $speed, $ease);
}

// @mixins
//
// We use this to add single or multiple transitions to elements
// $property - Default: all, Options: http://www.w3.org/TR/css3-transitions/#animatable-properties
// $speed - Default: 300ms
// $ease - Default: ease-out, Options: http://css-tricks.com/almanac/properties/t/transition-timing-function/
// $delay - Default: null (0s)
@mixin transition($property:all, $speed:300ms, $ease:ease-out, $delay:null) {
  $transition: none;

  @if length($property) > 1 {

    @each $transition_list in $property {

      @for $i from 1 through length($transition_list) {

        @if $i == 1 {
          $_property: nth($transition_list, $i);
        }

        @if length($transition_list) > 1 {
          @if $i == 2 {
            $_speed: nth($transition_list, $i);
          }
        } @else {
          $_speed: $speed;
        }

        @if length($transition_list) > 2 {
          @if $i == 3 {
            $_ease: nth($transition_list, $i);
          }
        } @else {
          $_ease: $ease;
        }

        @if length($transition_list) > 3 {
          @if $i == 4 {
            $_delay: nth($transition_list, $i);
          }
        } @else {
          $_delay: $delay;
        }
      }

      @if $transition == none {
        $transition: $_property $_speed $_ease $_delay;
      } @else {
        $transition: $transition, $_property $_speed $_ease $_delay;
      }
    }
  }
  @else {

    @each $prop in $property {

      @if $transition == none {
        $transition: $prop $speed $ease $delay;
      } @else {
        $transition: $transition, $prop $speed $ease $delay;
      }
    }
  }

  transition: $transition;
}

// @mixins
//
// We use this to add box-sizing across browser prefixes
@mixin box-sizing($type:border-box) {
  -webkit-box-sizing: $type; // Android < 2.3, iOS < 4
     -moz-box-sizing: $type; // Firefox < 29
          box-sizing: $type; // Chrome, IE 8+, Opera, Safari 5.1
}



// We use this to do clear floats
@mixin clearfix {
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
}



// @mixins
//
// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  overflow: hidden;
  position: absolute !important;
  width: 1px;
}

// @mixins
//
// Turns off the element-invisible effect.
@mixin element-invisible-off {
  position: static !important;
  height: auto;
  width: auto;
  overflow: visible;
  clip: auto;
}